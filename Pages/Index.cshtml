@page
@model IndexModel

<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>

<div id="playfield">
    <div v-if="!playerDead">
        <input onblur="this.focus()" autofocus type="text" id="controller"
               v-on:keydown.left="playerPosX = playerPosX <= 1 ? 1 : (playerPosX-1)"
               v-on:keydown.right="playerPosX = playerPosX >= 10 ? 10 : (playerPosX+1)"
               v-on:keydown.up="playerPosY = playerPosY <= 1 ? 1 : (playerPosY-1)"
               v-on:keydown.down="playerPosY = playerPosY >= 10 ? 10 : (playerPosY+1)" />
    </div>
    <div v-else>
        <input onblur="this.focus()" autofocus type="text" id="no-controller" />
    </div>

    <div class="row" v-for="ri in 10" :key="ri">
        <div v-bind:class="{
             block: true,
             player: !playerDead && ri == playerPosY && bi == playerPosX,
             bouncer: ri == bouncerPosY && bi == bouncerPosX,
             death: playerPosX == bouncerPosX && playerPosY == bouncerPosY
             }" v-for="bi in 10" :key="bi"></div>
    </div>

    <div v-if="playerDead">
        <button id="reset-button" onclick="window.location.reload()">
            Try again?
        </button>
    </div>
</div>

<script>
    var vm = new Vue({
        el: '#playfield',
        data: {
            title: 'Vue Tourist',
            playerDead: false,
            playerPosX: 5,
            playerPosY: 5,
            bouncerPosX: 9,
            bouncerPosY: 9
        },
        watch: {
            playerPosX: function () {
                this.checkPlayerDeath();
            },
            playerPosY: function () {
                this.checkPlayerDeath();
            },
            bouncerPosX: function () {
                this.checkPlayerDeath();
            },
            bouncerPosY: function () {
                this.checkPlayerDeath();
            }
        },
        mounted() {
            this.moveBouncer();
        },
        methods: {
            checkPlayerDeath: function () {
                if (this.playerPosX === this.bouncerPosX && this.playerPosY === this.bouncerPosY) {
                    this.playerDeath();
                }
            },
            getRandomInt: function (min, max) {
                min = Math.ceil(min);
                max = Math.floor(max);

                // The maximum is exclusive and the minimum is inclusive.
                return Math.floor(Math.random() * (max - min)) + min;
            },
            playerDeath: function () {
                this.playerDead = true;
            },
            moveBouncer: function () {
                var gonnaMoveUp = this.getRandomInt(0, 2) === 1;
                var gonnaMoveLeft = this.getRandomInt(0, 2) === 1;
                var noMoveY = this.getRandomInt(0, 2) === 1;
                var noMoveX = this.getRandomInt(0, 2) === 1;

                if (!noMoveY) {
                    if (gonnaMoveUp && this.bouncerPosY > 1)
                        this.bouncerPosY = this.bouncerPosY - 1;
                    else if (this.bouncerPosY < 10)
                        this.bouncerPosY = this.bouncerPosY + 1;
                }

                if (!noMoveX) {
                    if (gonnaMoveLeft && this.bouncerPosX > 1)
                        this.bouncerPosX = this.bouncerPosX - 1;
                    else if (this.bouncerPosX < 10)
                        this.bouncerPosX = this.bouncerPosX + 1;
                }

                if (!this.playerDead) {
                    var self = this;
                    setTimeout(self.moveBouncer, 50);
                }
            }
        }
    });
</script>

<style>
    #reset-button {
        background-color: black;
        border: 1px solid green;
        border-radius: 4px;
        color: white;
        margin-top: 20px;
        text-align: center;
    }

    #playfield {
        min-width: 1000px;
    }

    #controller, #no-controller {
        width: 2px;
        height: 2px;
        background: white;
        color: white;
        border: 1px solid white;
    }

    .block {
        border: 1px solid white;
        background-color: silver;
        padding: 20px;
    }

    .player {
        background-color: lime;
    }

    .bouncer {
        background-color: red !important;
    }

    .wall {
        background-color: #222222;
    }

    .death {
        background-color: black;
        transition: background-color ease-in-out 500ms;
    }
</style>
